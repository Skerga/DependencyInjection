using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Skerga.Godot.DependencyInjection;

[Generator]
public class MainClassGenerator : IIncrementalGenerator
{
    private const string ClassCode = $$"""
                                       // <auto-generated/>
                                       
                                       using System;
                                       using System.Reflection;
                                       using System.Text.Json;
                                       using System.Threading;
                                       using System.Threading.Tasks;
                                       using Microsoft.Extensions.DependencyInjection;
                                       using Microsoft.Extensions.Hosting;
                                       
                                       namespace Godot.DependencyInjection
                                       {
                                         using System.Linq;
                                       
                                         internal class SceneTreeIntegrationTask : BackgroundService
                                         {
                                             private readonly DependencyInjection _dependencyInjection;
                                             
                                             public SceneTreeIntegrationTask(DependencyInjection dependencyInjection)
                                             {
                                                 _dependencyInjection = dependencyInjection;
                                             }
                                       
                                             protected override async Task ExecuteAsync(CancellationToken stoppingToken)
                                             {
                                                 if(Engine.IsEditorHint()) return;
                                                 while (Engine.GetMainLoop() == null)
                                                 {
                                                     await Task.Yield();
                                                 }
                                                 DependencyInjection.GetRootNode().AddChild(_dependencyInjection, true);
                                             }
                                         }
                                         
                                         [GlobalClass, Tool]
                                         internal partial class DependencyInjection : Node
                                         {
                                             // Implement this method to configure your services.
                                             static partial void ConfigureServices(global::Microsoft.Extensions.Hosting.HostBuilderContext context, global::Microsoft.Extensions.DependencyInjection.IServiceCollection services);
                                             static partial void ConfigureHostConfiguration(global::Microsoft.Extensions.Configuration.IConfigurationBuilder configurationBuilder);
                                             static partial void CreateHostBuilder(ref global::Microsoft.Extensions.Hosting.IHostBuilder builder);
                                             // Overwrite in custom static constructor to support custom MainLoop implementations.
                                             
                                             public static global::System.Func<Window> GetRootNode { get; set; } = () => (Engine.GetMainLoop() as SceneTree).Root;
                                             private static global::Microsoft.Extensions.Hosting.IHost Host { get; set; }
                                             private static bool isRunning = false;
                                             
                                             private static void Run()
                                             {
                                                 if (!isRunning)
                                                 {
                                                     isRunning = true;
                                                     
                                                     var node = new DependencyInjection(){ Name = "DependencyInjection" };
                                                     
                                                     if (Host == null)
                                                     {
                                                         global::Microsoft.Extensions.Hosting.IHostBuilder builder = null;
                                                         CreateHostBuilder(ref builder);
                                                         if (builder == null)
                                                         {
                                                             builder = new global::Microsoft.Extensions.Hosting.HostBuilder();
                                                         }
                                       
                                                         builder.ConfigureHostConfiguration((cfg) => ConfigureHostConfiguration(cfg))
                                                             .ConfigureServices((ctx, services) => ConfigureServices(ctx, services));
                                       
                                                         builder.ConfigureServices((ctx, services) =>
                                                         {
                                                             services.AddSingleton(node);
                                                             services.AddHostedService<SceneTreeIntegrationTask>();
                                                         });
                                       
                                                         Host = builder.Build();
                                                     }
                                                     
                                                     var hostedNodes = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices<Node>(Host.Services);
                                                     foreach (var service in hostedNodes)
                                                     {
                                                         service.Name = service.GetType().FullName;
                                                         node.AddChild(service);
                                                     }
                                                     
                                                     global::Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Start(Host);
                                                 }
                                             }
                                             
                                             public static T GetService<T>()
                                             {
                                                 Run();
                                                 return global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService<T>(Host.Services);
                                             }
                                       
                                             public static object GetService(global::System.Type type)
                                             {
                                                 Run();
                                                 return Host.Services.GetService(type);
                                             }
                                       
                                             public override async void _Notification(int what)
                                             {
                                                 if (what == NotificationWMCloseRequest)
                                                 {
                                                     var CancellationTokenSource = new global::System.Threading.CancellationTokenSource();
                                                     CancellationTokenSource.CancelAfter(5000);
                                                     await Host.StopAsync(CancellationTokenSource.Token);
                                                 }
                                             }
                                       
                                             [System.Runtime.CompilerServices.ModuleInitializer]
                                             public static void Initialize()
                                             {
                                                 System.Runtime.Loader.AssemblyLoadContext.GetLoadContext(System.Reflection.Assembly.GetExecutingAssembly()).Unloading += async (alc) =>
                                                 {
                                                     var CancellationTokenSource = new global::System.Threading.CancellationTokenSource();
                                                     CancellationTokenSource.CancelAfter(2000);
                                                     await Host.StopAsync(CancellationTokenSource.Token);
                                                     Host.Dispose();
                                                     Host = null;
                                       
                                                     var assembly = typeof(JsonSerializerOptions).Assembly;
                                                     var updateHandlerType = assembly.GetType("System.Text.Json.JsonSerializerOptionsUpdateHandler");
                                                     var clearCacheMethod = updateHandlerType?.GetMethod("ClearCache", BindingFlags.Static | BindingFlags.Public);
                                       #nullable enable
                                                     clearCacheMethod?.Invoke(null, new object?[] { null });
                                       #nullable disable
                                                 };
                                             }
                                         }
                                       
                                         public static class DependencyInjectionNodeExtensions
                                         {
                                             public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddHostedService<TNode>(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
                                                 where TNode : Node
                                             {
                                                 global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(services, global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<Node, TNode>());
                                                 return services;
                                             }
                                       
                                             public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddHostedService<TNode>(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::System.Func<global::System.IServiceProvider, TNode> implementationFactory)
                                                 where TNode : Node
                                             {
                                                 global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(services, global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<Node>(implementationFactory));
                                                 return services;
                                             }
                                         }
                                       }
                                       """;
    
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
            "DependencyInjectionSetup.g.cs",
            SourceText.From(ClassCode, Encoding.UTF8)));
    }
}