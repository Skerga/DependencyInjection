using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Skerga.Godot.DependencyInjection;

[Generator]
public class CtorGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider.ForAttributeWithMetadataName("Godot.DependencyInjection.InjectAttribute",
                predicate: (c, _) => c is ConstructorDeclarationSyntax,
                transform: (n, _) => n.TargetNode)
            .Where(m => m is not null);
        
        var compilation = context.CompilationProvider.Combine(provider.Collect());
        
        context.RegisterSourceOutput(compilation,
            (spc, source) => Execute(spc, source.Left, source.Right));
    }

    private static void Execute(SourceProductionContext context, Compilation compilation, ImmutableArray<SyntaxNode> ctorList)
    {
        foreach (var syntax in ctorList)
        {
            if (compilation
                    .GetSemanticModel(syntax.SyntaxTree)
                    .GetDeclaredSymbol(syntax) is not IMethodSymbol symbol)
                continue;
            
            var builder = new StringBuilder();
            
            symbol.Parameters
                .Select(p => p.Type.ToDisplayString())
                .ToList()
                .ForEach(p => builder.Append($"global::Godot.DependencyInjection.DependencyInjection.GetService<{p}>(),"));

            builder.Length -= builder.Length > 0 ? 1 : 0;
            
            var className = symbol.ContainingType.Name;
            var namespaceName = symbol.ContainingType.ContainingNamespace.ToDisplayString();
            var isGlobal = namespaceName == "<global namespace>";
            var ctorBody = builder.ToString();
            var source = $$"""
                           // <auto-generated/>
                           namespace {{namespaceName}}
                           {
                               public partial class {{className}}
                               {
                                   public {{className}}() : this({{ctorBody}})
                                   {}
                               }
                           }
                           """;
            
            var globalSource = $$"""
                                 // <auto-generated/>
                                 public partial class {{className}}
                                 {
                                    public {{className}}() : this({{ctorBody}})
                                    {} 
                                 };
                                 """;
            
            context.AddSource($"{className}.g.cs", isGlobal ? globalSource : source);
        }
    }
}